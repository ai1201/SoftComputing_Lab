import numpy as np
import random

def fitness_function(x):
    """Example fitness function: f(x) = x^2"""
    return x ** 2

def initialize_population(size, lower_bound, upper_bound):
    """Generate initial population"""
    return [random.uniform(lower_bound, upper_bound) for _ in range(size)]

def select_parents(population, fitness_values):
    """Select two parents using tournament selection"""
    selected = random.choices(population, weights=fitness_values, k=2)
    return selected

def crossover(parent1, parent2):
    """Perform single-point crossover"""
    return (parent1 + parent2) / 2

def mutate(offspring, mutation_rate, lower_bound, upper_bound):
    """Apply mutation"""
    if random.random() < mutation_rate:
        offspring += random.uniform(-1, 1)
        offspring = np.clip(offspring, lower_bound, upper_bound)
    return offspring

def genetic_algorithm(pop_size=10, generations=50, mutation_rate=0.1, lower_bound=-10, upper_bound=10):
    """Run Genetic Algorithm"""
    population = initialize_population(pop_size, lower_bound, upper_bound)
    
    for _ in range(generations):
        fitness_values = [fitness_function(ind) for ind in population]
        new_population = []
        
        for _ in range(pop_size // 2):
            parent1, parent2 = select_parents(population, fitness_values)
            offspring = crossover(parent1, parent2)
            offspring = mutate(offspring, mutation_rate, lower_bound, upper_bound)
            new_population.extend([parent1, offspring])
        
        population = new_population
    
    best_solution = max(population, key=fitness_function)
    return best_solution, fitness_function(best_solution)

# Run Genetic Algorithm
best_individual, best_fitness = genetic_algorithm()
print("Best Individual:", best_individual)
print("Best Fitness:", best_fitness)
